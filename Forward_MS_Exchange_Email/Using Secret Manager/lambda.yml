Parameters:
  LambdaS3Bucket:
    Type: String
    Description: S3 Bucket Name Which Contains Zipped Lambda Code
  LambdaZipFileName:
    Type: String
    Description: File Name Of Zipped Lambda Code Uploaded to S3
    Default: "lambda_function.zip"
  NameSuffix:
    Type: String
    Description: Various Resources Like Lambda,SNS, CloudWatch Will Append This String To Their Name
  LambdaMemory:
    Type: Number
    Description: Memory Setting Of Lambda Function Name
    Default : 512
  LambdaSubnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: Subnet Id For Lambda Function.Subnet Must Have Connectivity To AMS Mail Server
  VPC:
    Type: 'AWS::EC2::VPC::Id'
    Description: VPC Id For Lambda Function
  VPCCIDR:
    Type: String
    Description: VPC CIDR Range
  SNSTopicSubscriberEmail:
    Type: String
    Description: Email Address To Receive Alert When Lambda Execution Encounters Some Error
  CloudWatchSchedule:
    Type: Number
    Description: How Frequently To Invoke EMail Forwarding Lambda Function. Default Is 5 minutes
    Default: 5
  
  
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: S3 Bucket Details Which Contains Lambda Code
        Parameters:
          - LambdaS3Bucket
          - LambdaZipFileName
      - Label:
          default: Lambda Configuration
        Parameters:
          - VPC
          - VPCCIDR
          - LambdaSubnets
          - LambdaMemory
      - Label:
          default: Other Parameters
        Parameters:
          - NameSuffix
          - SNSTopicSubscriberEmail
          - CloudWatchSchedule
          
      

Resources:
  LambdaSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: Email Forwarding Lambda Security Group
      GroupDescription: Lambda Traffic
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
  LambdaSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: LambdaSecurityGroup
    Properties:
      GroupId: !Ref LambdaSecurityGroup
      IpProtocol: tcp
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId: !Ref LambdaSecurityGroup
  LambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Join [ "-", [ "/aws/lambda/lambda", !Ref NameSuffix ] ]
  IamRoleLambdaExecution:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      RoleName: !Join [ "-", [ "iam-role", !Ref NameSuffix ] ]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
      Policies:
        - PolicyName: !Join [ "-", [ "iam-policy", !Ref NameSuffix ] ]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/lambda-${NameSuffix}*:*
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: !Ref EMailForwardingParameter
              - Effect: Allow
                Action:
                  - 'kms:Decrypt'
                Resource: !GetAtt KMSKey.Arn
                  
  EmailForwardingLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: !Ref LambdaZipFileName
      Description: Email Forwarding Lambda
      FunctionName: !Join [ "-", [ "lambda", !Ref NameSuffix ] ]
      MemorySize: !Ref LambdaMemory
      PackageType: Zip
      Role: !GetAtt IamRoleLambdaExecution.Arn
      Runtime: python3.10
      Handler: "lambda_function.lambda_handler"
      Timeout: 900
      Layers: ["arn:aws:lambda:ap-southeast-1:044395824272:layer:AWS-Parameters-and-Secrets-Lambda-Extension:11"]
      Environment:
        Variables:
          ENV_SECRET: !Sub 'credentials-${NameSuffix}'
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds: !Ref LambdaSubnets
        
  EmailForwardingLambdaErrorSNSTopic: 
    Type: AWS::SNS::Topic
    Properties: 
      Subscription: 
        - Endpoint: !Ref SNSTopicSubscriberEmail    
          Protocol: "email"
      TopicName: !Join [ "-", [ "sns", !Ref NameSuffix ] ]
     
  EmailForwardingScheduledRule: 
   Type: AWS::Events::Rule
   Properties: 
     Name: !Join [ "-", [ "cw-event", !Ref NameSuffix ] ]
     Description: "Email Forwarding Scheduled Rule"
     ScheduleExpression: !Join [ "", [ "rate(", !Ref CloudWatchSchedule, " minutes)" ] ]
     State: "ENABLED"
     Targets: 
       - 
         Arn: 
           Fn::GetAtt: 
             - "EmailForwardingLambda"
             - "Arn"
         Id: "EmailForwardingLambda"

  PermissionForEventsToInvokeEmailForwardingLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "EmailForwardingLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "EmailForwardingScheduledRule"
          - "Arn"
        
  EmailForwardingLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Join [ "-", [ "cw-alarm", !Ref NameSuffix ] ]
      AlarmDescription: "EmailForwardingLambdaErrorAlarm"
      Namespace: "AWS/Lambda"
      MetricName: "Errors"
      Dimensions:
      - Name: "FunctionName"
        Value: !Join [ "-", [ "lambda", !Ref NameSuffix ] ]
      Statistic: "Sum"
      ComparisonOperator: "GreaterThanThreshold"
      Threshold: 0
      EvaluationPeriods: 1
      Period: 120
      TreatMissingData: "breaching"
      ActionsEnabled: true
      AlarmActions:
      - !Ref EmailForwardingLambdaErrorSNSTopic
                
  SMTPVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      SecurityGroupIds: [!Ref SMTPVPCEndpointSecurityGroup]
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.email-smtp"
      SubnetIds: !Ref LambdaSubnets
      VpcEndpointType: Interface
      VpcId: !Ref VPC
      PrivateDnsEnabled: true
      
  SMTPVPCEndpointSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: Security Group For SMTP VPC EndPoint
      GroupDescription: Security Group For SMTP VPC EndPoint
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
  SMTPVPCEndpointSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: SMTPVPCEndpointSecurityGroup
    Properties:
      GroupId: !Ref SMTPVPCEndpointSecurityGroup
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: !Ref VPCCIDR
      
  SecretsManagerVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      SecurityGroupIds: [!Ref SecretsManagerVPCEndpointSecurityGroup]
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.secretsmanager"
      SubnetIds: !Ref LambdaSubnets
      VpcEndpointType: Interface
      VpcId: !Ref VPC
      PrivateDnsEnabled: true
      
  SecretsManagerVPCEndpointSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: Security Group For Secrets Manager VPC EndPoint
      GroupDescription: Security Group For Secrets Manager VPC EndPoint
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
  SecretsManagerVPCEndpointSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: SecretsManagerVPCEndpointSecurityGroup
    Properties:
      GroupId: !Ref SecretsManagerVPCEndpointSecurityGroup
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: !Ref VPCCIDR
      
  KMSKey:
    Type: 'AWS::KMS::Key'
    Properties:
      KeyPolicy:
        Version: 2012-10-17
        Id: key-policy-id
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: 'kms:*'
            Resource: '*'

  KMSKeyAlias:
    Type: 'AWS::KMS::Alias'
    Properties:
      AliasName: "alias/ams-secretmanager-kms-key"
      TargetKeyId: !Ref KMSKey
      
  EMailForwardingParameter:
    Type: AWS::SecretsManager::Secret
    Properties: 
      Description: Secret Containing Exchange Server/SMTP Credentials And Other Environment Variables
      Name: !Join [ "-", [ "credentials", !Ref NameSuffix ] ]
      KmsKeyId: !Ref KMSKey
      
                   
Outputs: 
  EmailForwardingLambda: 
    Description: Email Forwarding Lambda Function
    Value: !GetAtt EmailForwardingLambda.Arn
  EmailForwardingLambdaErrorSNSTopic: 
    Description: SNS Topic To Send Lambda Execution Error Notifications
    Value: !GetAtt EmailForwardingLambdaErrorSNSTopic.TopicArn
  EmailForwardingLambdaErrorAlarm: 
    Description: CloudWatch Alarm Name For Lambda Execution Error
    Value: !GetAtt EmailForwardingLambdaErrorAlarm.Arn
  EmailForwardingLambdaTrigger: 
    Description: EventBridge Rule To Trigger Email Forwarding Lambda
    Value: !GetAtt EmailForwardingScheduledRule.Arn
  EmailForwardingParameter: 
    Description: Secret Manager Secret Name To Create Environment Variables Required For Email Forwarding Lambda
    Value: !Ref EMailForwardingParameter


